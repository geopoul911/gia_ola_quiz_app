{"version":3,"sources":["components/Home.jsx","components/Login.jsx","components/Register.jsx","logic/QuizManager.js","components/Summary.jsx","components/Quiz.jsx","components/History.jsx","components/ProtectedRoute.jsx","App.js","index.js"],"names":["Home","history","setUserToken","id","className","to","onClick","localStorage","removeItem","push","HEADERS","Login","props","onSubmit","e","preventDefault","email","target","username","value","password","axios","method","url","headers","data","then","res","token","setItem","catch","setState","msg","state","getItem","this","ref","containerRef","htmlFor","type","name","placeholder","React","Component","setTimeout","cleanUpQuizQuestions","quizData","quiz","userAnswers","updatedQuestions","map","q","ua","find","question","answer_set","as","answer","label","is_correct","Summary","score","style","textAlign","Play","handleAnswerClick","questions","currentQuestion","selectedIndex","currentQuestionIndex","selectedAnswer","handleAnswerSubmit","quiztaker","quizTakerId","nextQuestionIndex","slug","nextQuestion","length","completed","handlePreviousNavigation","handleHomeClick","loaded","noData","get","status","lastAnsweredQuestionId","findIndex","findCurrentQuestionIndex","questionTitle","answers","isLastQuestion","History","rowClickHandler","quizDetail","detailView","resetToMyQuizzes","quizzes","detail","key","userAnswer","correctAnswer","useranswer_percent","threshold_rate","PrivateRoute","component","render","isLoggedIn","rest","pathname","App","useState","userToken","exact","path","Register","ProtectedRoute","Quiz","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33b132b5.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\n// home page of our application\nconst Home = ({history, setUserToken}) => {\n\n     const handleLogout = () => {\n         localStorage.removeItem('userToken');\n         setUserToken(null);\n         history.push('/login');\n     };\n\n     return (\n        <Fragment>\n            <div id='home'>\n                <section>\n                    <h1 className='app-title'>Quiz App</h1>\n                        <div className='auth-container'>\n                            <Link to='/quiz' className='auth-buttons' id='play-button'>Play</Link>\n                            <Link to='/history' className='auth-buttons' id='history-button'>History</Link>\n                            <button onClick={handleLogout} className='auth-buttons' id='logout-button'>Logout</button>\n                        </div>\n                </section>\n            </div>\n        </Fragment>\n     );\n};\n\nexport default Home;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from 'react-router-dom';\n\nconst BACKEND_LOGIN_ENDPOINT = 'http://localhost:8001/api/user/login/';\nconst HEADERS = {\n    \"Content-type\": \"Application/json\",\n};\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            msg: ''\n        }\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const email = e.target.username.value;\n        const password = e.target.password.value;\n\n        axios({\n            method: 'post',\n            url: BACKEND_LOGIN_ENDPOINT,\n            headers: HEADERS,\n            data: {\n                email,\n                password,\n            }\n        }).then((res) => {\n            const token = res.data.token;\n            localStorage.setItem(\"userToken\",token);\n            this.props.setUserToken(token);\n            this.props.history.push('/');\n\n        }).catch(e => {\n            this.setState({\n                msg: 'Login Failed. Please verify email/password.'\n            })\n        })\n    };\n\n    componentDidMount() {\n        if (localStorage.getItem('userToken')){\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"base-container login-container\" ref={this.props.containerRef}>\n                <h1>Login</h1><div className=\"content\">\n                    <form className=\"form login-form\" onSubmit={this.onSubmit}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Email</label>\n                            <input type=\"text\" name=\"username\" placeholder=\"username\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input type=\"password\" name=\"password\" placeholder=\"password\" />\n                        </div>\n                        <p className='login-message'>{this.state.msg}</p>\n                        <div className=\"footer\">\n                            <button type=\"submit\" className=\"btn\">\n                                Login\n                            </button>\n                        </div>\n                        <Link to='/register' className='register-link' id='register'>New User?</Link>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React from \"react\";\nimport axios from \"axios\";\n\nconst BACKEND_LOGIN_ENDPOINT = 'http://localhost:8001/api/user/register/';\nconst HEADERS = {\n    \"Content-type\": \"Application/json\",\n};\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            msg: ''\n        }\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const email = e.target.username.value;\n        const password = e.target.password.value;\n        const name = e.target.name.value;\n\n        axios({\n            method: 'post',\n            url: BACKEND_LOGIN_ENDPOINT,\n            headers: HEADERS,\n            data: {\n                email,\n                password,\n                name\n            }\n        }).then((res) => {\n            this.setState({\n                msg: 'Registration Successful. Redirecting to login page...'\n            });\n            setTimeout(() => {\n                this.props.setUserToken(null);\n                this.props.history.push('/login');\n            }, 2000);\n\n        }).catch(e => {\n            this.setState({\n                msg: 'Registration Failed. Please verify input data.'\n            })\n        })\n    };\n\n    componentDidMount() {\n        if (localStorage.getItem('userToken')){\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"base-container login-container\" ref={this.props.containerRef}>\n                <h1>Register</h1><div className=\"content\">\n                <form className=\"form login-form\" onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Name</label>\n                        <input type=\"text\" name=\"name\" placeholder=\"name\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"username\">Email</label>\n                        <input type=\"text\" name=\"username\" placeholder=\"username\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" name=\"password\" placeholder=\"password\" />\n                    </div>\n                    <p className='login-message'>{this.state.msg}</p>\n                    <div className=\"footer\">\n                        <button type=\"submit\" className=\"btn\">\n                            Submit\n                        </button>\n                    </div>\n                </form>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","//manager logic required by our components\n\n// when a quiz is returned when a user clicks Play, we have to find the first unanswered question.\nexport const findCurrentQuestionIndex = quizData => {\n  if (quizData) {\n      const lastAnsweredQuestionId = quizData['last_question_id'];\n      const quiz = quizData['quiz'];\n\n      if (!lastAnsweredQuestionId)\n          return 0;\n\n      const questions = quiz['question_set'];\n\n      const currentQuestionIndex = questions.findIndex(q => q.id === lastAnsweredQuestionId) + 1;\n      return currentQuestionIndex < questions.length ? currentQuestionIndex : (questions.length - 1);\n\n  }\n};\n\n// update API response questions with user selected answer\nexport const updatedQuestions = quizData => {\n    if (quizData){\n        const userAnswers = quizData['quiz']['quiztakers_set']['useranswer_set'];\n        const questions = quizData['quiz']['question_set'];\n\n        return questions.map(q => {\n            q['selectedAnswer'] = userAnswers.find(ua => q.id === ua.question).answer;\n            return q;\n        })\n    }\n    return [];\n};\n\n\n// get questions with user answers\nexport const cleanUpQuizQuestions = (quizData) => {\n    const quiz = quizData['quiz'];\n    const userAnswers = quiz['quiztakers_set']['useranswer_set'];\n    const questions = quiz['question_set'];\n\n    const updatedQuestions = questions.map(q => {\n        const ua = userAnswers.find(ua => ua.question == q.id)\n        q['userAnswer'] = q.answer_set.find(as => as.id == ua.answer).label;\n        q['correctAnswer'] = q.answer_set.find(as => as.is_correct).label;\n        return q;\n    })\n\n    quiz['questions'] = updatedQuestions;\n    return quiz;\n\n};\n","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\n// display final score\nclass Summary extends Component {\n    constructor (props) {\n        super(props);\n    }\n\n\n    render () {\n        const { score } = this.props;\n\n        return (\n            <Fragment>\n                <title>Quiz App - Summary</title>\n                <div className=\"quiz-summary\">\n                    <Fragment>\n                        <div style={{ textAlign: 'center' }}>\n                            <span className=\"mdi mdi-check-circle-outline success-icon\"></span>\n                        </div>\n                        <h1>Quiz has ended</h1>\n                        <div className=\"container stats\">\n                            <h2>Your Score: {score}&#37;</h2>\n                        </div>\n                        <section>\n                            <ul>\n                                <li>\n                                    <Link to =\"/\">Back to Home</Link>\n                                </li>\n                            </ul>\n                        </section>\n                    </Fragment>\n                </div>\n            </Fragment>\n        );\n    }\n}\nexport default Summary;\n","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { findCurrentQuestionIndex, updatedQuestions } from '../logic/QuizManager';\nimport Summary from './Summary';\n\nconst BACKEND_LOAD_QUIZ_ENDPOINT = 'http://localhost:8001/api/quiz/quizzes';\nconst BACKEND_SUBMIT_ANSWER_ENDPOINT = 'http://localhost:8001/api/quiz/save-answer/';\n\nconst HEADERS = {\n    \"Content-type\": \"Application/json\",\n};\n\n\n// main component that renders the quiz question and answers\nclass Play extends Component {\n\n    constructor( props) {\n        super(props);\n\n        //state required by our application\n        this.state = {\n            questions: [], //all the questions of our quiz\n            currentQuestionIndex: 0, //index of the current question that is displayed\n            currentQuestion: {}, //current question details\n            selectedAnswer: null, //the answer a user has selected\n            quizTakerId: null, //id of the person taking the quiz. this id maps to the id in the backend QuizTaker model\n            loaded: false, //is the quiz loaded.\n            noData: false, // is there data to be displayed\n            slug: '', //url path for the quiz (eg: cricket-quiz)\n            completed: false, // is the quiz completed\n            score: null, //score for quiz. used once the quiz is completed to display the final score\n        }\n\n    }\n\n    // called when the component is mounted. makes API request to load quiz\n    componentDidMount() {\n        HEADERS['Authorization'] = 'Token ' + localStorage.getItem('userToken');\n        axios.get(BACKEND_LOAD_QUIZ_ENDPOINT, {\n            headers: HEADERS\n        })\n        .then(res => {\n            if (res.status === 204) {\n                this.setState({\n                    loaded: true,\n                    noData: true,\n                });\n                return;\n            }\n            const quizData = res.data;\n\n            // loaded quiz data is set to the state\n            if (quizData && quizData['quiz']) {\n                const questions = updatedQuestions(quizData);\n                const currentQuestionIndex = findCurrentQuestionIndex(quizData);\n                const quizTakerId = quizData['quiz']['quiztakers_set']['id'];\n\n                this.setState({\n                    questions,\n                    currentQuestionIndex,\n                    quizTakerId,\n                    currentQuestion: questions[currentQuestionIndex],\n                    selectedAnswer: questions[currentQuestionIndex].selectedAnswer,\n                    loaded: true,\n                    slug: quizData['quiz']['slug'],\n                    noData: false,\n                });\n            }\n        })\n    }\n\n\n    // when an answer is clicked, take note and update the state\n    handleAnswerClick = (e) => {\n        const answer = e.target.id;\n\n        const questions = this.state.questions;\n        const currentQuestion = this.state.currentQuestion;\n        const selectedIndex = this.state.currentQuestionIndex;\n\n        currentQuestion['selectedAnswer'] = answer;\n        questions[selectedIndex] = currentQuestion;\n\n\n        this.setState({\n            selectedAnswer: e.target.id,\n            questions,\n        });\n    };\n\n    // when an answer is submitted, update the backend\n    handleAnswerSubmit = (e) => {\n        HEADERS['Authorization'] = 'Token ' + localStorage.getItem('userToken');\n\n        const answer = this.state.selectedAnswer;\n        const questions = this.state.questions;\n        const question = this.state.currentQuestion.id;\n        const quiztaker = this.state.quizTakerId;\n        const selectedIndex = this.state.currentQuestionIndex;\n        const nextQuestionIndex = selectedIndex + 1;\n        const slug = this.state.slug;\n        const nextQuestion = questions[nextQuestionIndex];\n\n        if (nextQuestionIndex < questions.length) {\n            axios({\n                method: 'patch',\n                url: BACKEND_SUBMIT_ANSWER_ENDPOINT,\n                headers: HEADERS,\n                data: {\n                    quiztaker,\n                    question,\n                    answer,\n                }\n            }).then((res) => {\n                this.setState({\n                    currentQuestionIndex: nextQuestionIndex,\n                    currentQuestion: nextQuestion,\n                    selectedAnswer: nextQuestion['selectedAnswer'],\n                })\n            })\n        } else {\n            axios({\n                method: 'post',\n                url: `http://localhost:8001/api/quiz/quizzes/${slug}/submit/`,\n                headers: HEADERS,\n                data: {\n                    quiztaker,\n                    question,\n                    answer,\n                }\n            }).then((res) => {\n                this.setState({\n                    completed: true,\n                    score: res.data['quiztaker_set']['score']\n                })\n            })\n        }\n    };\n\n    // handle previous navigation by changing current index\n    handlePreviousNavigation = (e) => {\n        const nextQuestionIndex = this.state.currentQuestionIndex - 1;\n        const currentQuestion = this.state.questions[nextQuestionIndex];\n\n        if (nextQuestionIndex >= 0) {\n            this.setState({\n                currentQuestionIndex: nextQuestionIndex,\n                currentQuestion: currentQuestion,\n                selectedAnswer: currentQuestion.selectedAnswer,\n            })\n        }\n    };\n\n    handleHomeClick = () => {\n        this.props.history.push('/');\n    };\n\n    render() {\n        // quiz is completed. show score\n        if (this.state.completed) {\n            return (<Summary score={this.state.score}/>)\n        // no quizzes available in backend\n        } else if (this.state.loaded && this.state.noData){\n            return (\n                <Fragment>\n                    <div className='questions'>\n                        <h5>You have completed all available quizzes.</h5>\n                    </div>\n                    <div className='quiz-summary'>\n                    <section>\n                        <ul>\n                            <li>\n                                <Link to=\"/\">Back to Home</Link>\n                            </li>\n                        </ul>\n                    </section>\n                    </div>\n                </Fragment>\n            )\n        }\n        // quiz available and loaded\n        else if (this.state.loaded) {\n            const currentQuestion = this.state.questions[this.state.currentQuestionIndex];\n            const questionTitle = currentQuestion.label;\n            const answers = currentQuestion.answer_set;\n            const isLastQuestion = this.state.currentQuestionIndex === this.state.questions.length - 1;\n            const selectedAnswer = currentQuestion.selectedAnswer;\n\n            return (\n                <Fragment>\n                    <div className='questions'>\n                        <h5>{questionTitle}</h5>\n                        <div className='answers-container'>\n                            <p className={selectedAnswer && selectedAnswer == answers[0].id ?\n                                'answer answer-selected' : 'answer'} id = {answers[0].id}\n                               onClick={this.handleAnswerClick}>{answers[0].label}</p>\n                            <p className={selectedAnswer && selectedAnswer == answers[2].id ?\n                                'answer answer-selected' : 'answer'} id = {answers[2].id}\n                               onClick={this.handleAnswerClick}>{answers[2].label}</p>\n                        </div>\n                        <div className='answers-container'>\n                            <p className={selectedAnswer && selectedAnswer == answers[1].id ?\n                                'answer answer-selected' : 'answer'} id = {answers[1].id}\n                               onClick={this.handleAnswerClick}>{answers[1].label}</p>\n                            <p className={selectedAnswer && selectedAnswer == answers[3].id ?\n                                'answer answer-selected' : 'answer'} id = {answers[3].id}\n                               onClick={this.handleAnswerClick}>{answers[3].label}</p>\n                        </div>\n\n                        <div className='button-container'>\n                            <button className='button-previous' onClick={this.handlePreviousNavigation}>Previous</button>\n                            {\n                                isLastQuestion ?\n                                        <button onClick={this.handleAnswerSubmit} className='button-next'>Submit</button> :\n                                    <button onClick={this.handleAnswerSubmit} className='button-next'>Next</button>\n                            }\n                            <button onClick={this.handleHomeClick} className='button-home'>Home</button>\n                        </div>\n                    </div>\n                </Fragment>\n            )\n        } else {\n            // we are still loading the quiz\n            return (\n                <Fragment>\n                    <div className='questions'>\n                        <h5>Loading Quiz...</h5>\n                    </div>\n                </Fragment>\n            )\n        }\n    }\n}\n\nexport default Play;\n","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { cleanUpQuizQuestions } from '../logic/QuizManager';\n\nconst BACKEND_MY_QUIZZES_ENDPOINT = 'http://localhost:8001/api/quiz/my-quizzes';\nconst BACKEND_QUIZ_DETAIL_ENDPOINT = 'http://localhost:8001/api/quiz/quizzes/';\n\nconst HEADERS = {\n    \"Content-type\": \"Application/json\",\n};\n\n// history view\nclass History extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            quizzes: [],\n            detailView: false,\n            quizDetail: {},\n        }\n    }\n\n    // load all completed quizzes\n    componentDidMount() {\n        HEADERS['Authorization'] = 'Token ' + localStorage.getItem('userToken');\n        axios.get(BACKEND_MY_QUIZZES_ENDPOINT, {\n            headers: HEADERS\n        })\n        .then((res) => {\n            this.setState({\n                quizzes: res.data,\n            })\n        })\n\n    }\n\n    // when a quiz is clicked, load that quiz data\n    rowClickHandler = (quiz) => {\n        axios.get(BACKEND_QUIZ_DETAIL_ENDPOINT + quiz.slug, {\n            headers: HEADERS\n        })\n            .then((res) => {\n                this.setState({\n                    quizDetail: cleanUpQuizQuestions(res.data),\n                    detailView: true,\n                })\n            })\n    };\n\n    resetToMyQuizzes = () => {\n        this.setState({\n            detailView: false,\n        })\n    }\n\n\n    render () {\n\n        return (\n            <Fragment>\n                <div className=\"quiz-summary container\">\n                    {\n                        !this.state.detailView ?\n                        <Fragment>\n                            <div style={{textAlign: 'center'}}>\n                                <span className=\"mdi mdi-check-circle-outline success-icon\"></span>\n                            </div>\n                            <h1>Completed Quizzes</h1>\n                            <table style={{textAlign: 'center'}}>\n                                <thead>\n                                <tr >\n                                    <th>Quiz</th>\n                                    <th>My Score</th>\n                                    <th style={{textAlign: 'center'}}>Submission Rate Over 7 (%)</th>\n                                </tr>\n                                </thead>\n\n                                <tbody>\n                                {\n                                    this.state.quizzes.map(quiz => {\n                                        return (\n                                            <tr key={quiz.slug} onClick={() => this.rowClickHandler(quiz)}>\n                                                <td>{quiz.name}</td>\n                                                <td>{quiz.score}</td>\n                                                <td>{quiz.threshold_rate}</td>\n                                            </tr>\n                                        )\n                                    })\n                                }\n                                </tbody>\n                            </table>\n\n                            <section>\n                                <ul>\n                                    <li>\n                                        <Link to=\"/\">Back to Home</Link>\n                                    </li>\n                                </ul>\n                            </section>\n                        </Fragment> :\n\n                        <Fragment>\n                            <div style={{textAlign: 'center'}}>\n                                <span className=\"mdi mdi-check-circle-outline success-icon\"></span>\n                            </div>\n                            <h1>{this.state.quizDetail.name}</h1>\n                            <table>\n                                <thead>\n                                <tr>\n                                    <th>Question</th>\n                                    <th>My Answer</th>\n                                    <th>Correct Answer</th>\n                                    <th>Correct Percentage (%)</th>\n                                </tr>\n                                </thead>\n\n                                <tbody>\n                                {\n                                    this.state.quizDetail.questions.map(detail => {\n                                        return (\n                                            <tr key={detail.id}>\n                                                <td>{detail.label}</td>\n                                                <td>{detail.userAnswer}</td>\n                                                <td>{detail.correctAnswer}</td>\n                                                <td>{detail.useranswer_percent}</td>\n                                            </tr>\n                                        )\n                                    })\n                                }\n                                </tbody>\n                            </table>\n\n                            <section>\n                                <ul>\n                                    <li>\n                                        <Link onClick={this.resetToMyQuizzes}>Back to My Quizzes</Link>\n                                    </li>\n                                    <li>\n                                        <Link to=\"/\">Back to Home</Link>\n                                    </li>\n                                </ul>\n                            </section>\n                        </Fragment>\n                    }\n                </div>\n            </Fragment>\n        );\n    }\n}\nexport default History;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n\n// component to protect a route. checks if user is logged in when accessing a protected route\n// if not logged in, show login page\nconst PrivateRoute = ({ component: Component, render, isLoggedIn, ...rest }) => {\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                isLoggedIn === true ? (\n                    render ? render(props) :\n                    <Component {...props} />\n                ) : (\n                    <Redirect to={{ pathname: \"/login\" }} />\n                )\n            }\n        />\n    );\n};\n\nexport default PrivateRoute;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Quiz from './components/Quiz';\nimport Summary from './components/Summary';\nimport History from './components/History';\nimport ProtectedRoute from './components/ProtectedRoute';\n\n// initialization point for application\nfunction App() {\n\n    const [userToken, setUserToken] = useState(localStorage.getItem(\"userToken\"));\n\n    // route management is done here\n    return (\n      <Router>\n            <Switch>\n              {!!userToken !== true && (\n                  <Route\n                      exact\n                      path=\"/login\"\n                      render={props => <Login {...props} setUserToken={setUserToken} />}\n                  />\n              )}\n                {!!userToken !== true && (\n                    <Route\n                        exact\n                        path=\"/register\"\n                        render={props => <Register {...props} setUserToken={setUserToken} />}\n                    />\n                )}\n                {/* protected routes. only logged in user can access these routes*/}\n                <ProtectedRoute isLoggedIn={!!userToken} path=\"/\" exact render={props => <Home {...props} setUserToken={setUserToken} />}/>\n                <ProtectedRoute isLoggedIn={!!userToken} path='/quiz' exact component={Quiz}/>\n                <ProtectedRoute isLoggedIn={!!userToken} path='/summary' exact component={Summary}/>\n                <ProtectedRoute isLoggedIn={!!userToken} path='/history' exact component={History}/>\n          </Switch>\n      </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\nimport '../node_modules/materialize-css/dist/js/materialize.min.js';\nimport App from './App';\n\n\n// our application is mounted to the dom\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}